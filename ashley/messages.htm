<!DOCTYPE html>
<html>
    <head>
        <title>Ashley Messages</title>
        <link rel="stylesheet" href="css/mvp.css">
        <link rel="stylesheet" href="css/site.css">
    </head>
    <body>
        <script src="../scripts/html_tools.js"></script>
        <script src="../scripts/string_tools.js"></script>
        <script>
            function BadRando(state) {
                const date = new Date();
                const salty = date.getMilliseconds() + 1;
                const hour = date.getHours();
                const dayNum = date.getDay() + 1;
                const day = date.getDate();
                const month = date.getMonth() + 1;
                const yearNum = date.getFullYear();
                const rndSeed = (dayNum * day * month * yearNum * salty) + hour + salty;
                const isWeekend = dayNum === 1 || dayNum === 7;

                this.isMorning = hour < 12;
                this.isAfternoon = hour >= 12 && hour < 17;
                this.isEvening = hour >= 17;
                
                //Terms of endearment for the bedtime message.
                //Ensures three unique terms are used.
                //Yes, it could be an array/collection. It's not.
                //I have my reasons, you have yours.
                let usedTerm0 = '';
                let usedTerm1 = '';
                let usedTerm2 = '';

                function rnd(denom){
                    const ri = (rndSeed / denom) * 1000007003;
                    const result = ri - (Math.floor(ri));
                    return result;
                }

                function monthDiff(d1, d2){
                    let months = (d2.getFullYear() - d1.getFullYear()) * 12;
                    months -= d1.getMonth();
                    months += d2.getMonth();
                    return months <= 0 ? 0 : months;
                }

                this.getGoodMorning = () => {
                    switch (dayNum) {
                        case 1:
                        case 3:
                        case 6:
                            return `Good morning gorgeous.`;
                        default:
                            return `Good morning beautiful.`;
                    }
                };

                this.getILoveYou = () => {
                    const rnd1 = rnd(49205839);
                    if (Math.floor(rnd1 * 4) === 1){
                        const rnd2 = rnd(49290583);
                        const phrases = [
                            `I love you *so* much.`,
                            `I love you dearly.`,
                            `I love you immensely.`,
                            `I love you forever.`,
                        ];
                        return phrases[Math.floor(rnd2 * phrases.length)];
                    }
                    return `I love you.`;
                };

                this.getQuestions = () => {
                    let m = 14935804;
                    let msg = ``;
                    //0: is it the 19th?
                    if (day === 19){
                        const chattingSince = new Date(2023, 3, 19);
                        const diffMonths = monthDiff(chattingSince, date);
                        if (diffMonths % 12 === 0){
                            //anniversary
                            const numYears = diffMonths / 12;
                            const yearOrYears = numYears === 1 ? 'year' : 'years';
                            const cardinals = [
                                `first`,
                                `second`,
                                `third`,
                                `fourth`,
                                `fifth`,
                                `sixth`,
                                `seventh`,
                                `eighth`,
                                `ninth`,
                                `tenth`,
                            ];
                            const endearment = [
                                'Tonia',
                                'princess',
                                'baby girl',
                                'babe',
                            ];
                            const adjectives = [
                                'amazing',
                                'incredible',
                                'beautiful',
                                'wonderful',
                                'spectacular',
                            ];
                            const adj = adjectives[Math.floor(rnd(m++) * adjectives.length)];
                            const statement = `Happy ${cardinals[numYears-1]} anniversary ${endearment[Math.floor(rnd(m++) * endearment.length)]}!`;
                            const additions = [
                                `Can you believe it's been a whole ${numYears} ${yearOrYears} since we started chatting?`,
                                `It's been ${numYears} ${adj} ${yearOrYears} of chatting and growing our beautiful friendship.`,
                                `I have loved every second of the ${numYears} ${adj} ${yearOrYears} that we've known each other.`,
                                `I love that we have been chatting for ${numYears} ${adj} ${yearOrYears}!`,
                            ];
                            const yearEmojis = [
                                `🌹🌹🌹🌹🌹🌹🌹🌹🌹🌹🌹🌹`,
                                `🌺🌺🌺💝💝💝🌺🌺🌺`,
                                `🍾🥂❤️💋🫶💐🤗😘`,
                            ];
                            msg += `${statement} ${additions[Math.floor(rnd(m++) * additions.length)]} ${yearEmojis[Math.floor(rnd(m++) * yearEmojis.length)]} `;
                        }
                        else{
                            //monthiversary
                            const monthOrMonths = diffMonths === 1 ? 'month' : 'months';
                            const monthiversary = [
                                `Happy ${diffMonths} ${monthOrMonths} day!`,
                                `Can you believe it's already been ${diffMonths} ${monthOrMonths} since we've been talking babe?`,
                                `Happy ${diffMonths} ${monthOrMonths} day babe!`,
                                `It's been another wonderful month of chatting with my favorite person! Happy ${diffMonths} ${monthOrMonths} day babe!`,
                                `Happy ${diffMonths} ${monthOrMonths} day Tonia!`,
                            ];
                            const monthEmojis = [
                                `❤️❤️❤️`,
                                `🌺🌹💐`,
                                `💖🥰😚`,
                            ];
                            msg += `${monthiversary[Math.floor(rnd(m++) * monthiversary.length)]} ${monthEmojis[Math.floor(rnd(m++) * monthEmojis.length)]} `;
                        }
                    }

                    //1: how are you feeling today variations
                    const howFeeling = [
                        `How are you feeling today babe?`,
                        `How are you feeling today baby girl?`,
                        `How is my princess feeling today?`,
                        `How are you feeling babe?`,
                        `How are you feeling today princess?`,
                        `How are you feeling baby girl?`,
                    ];
                    msg += howFeeling[Math.floor(rnd(m++) * howFeeling.length)];
                    //2: how was your morning variations
                    const morning = [
                        `How has your day been so far?`,
                        `How's the day been treating you?`,
                        `How was your morning?`,
                        `How's the morning been treating you?`,
                        `How has the day been treating you?`,
                        `How was your morning?`,
                        `How did the morning treat you?`,
                        `How did your morning go?`,
                    ];
                    msg += ' ' + morning[Math.floor(rnd(m++) * morning.length)];
                    //3: up to 1 optional question about class, work, kaj, life, etc.
                    if (Math.floor(rnd(m++) * 5) > 2){
                        const optional = [];
                        optional.push(`How is Kaj doing today?`);
                        if (!isWeekend) {
                            optional.push(`How has class been today?`);
                            optional.push(`How is class treating you?`);
                            optional.push(`How have classes been going?`);
                            optional.push(`How is class going?`);
                        }
                        optional.push(`Has anything interesting happened yet today?`);
                        optional.push(`Anything interesting happening today?`);
                        optional.push(`Have you done anything interesting yet today?`);
                        optional.push(`Have you done anything fun yet today?`);
                        optional.push(`Anything fun going on today?`);
                        if (isWeekend) {
                            optional.push(`Any plans today?`);
                            optional.push(`Do you have anything fun planned for today?`);
                            optional.push(`What will you be doing today?`);
                            optional.push(`Do you have anything interesting planned for today?`);
                            optional.push(`What do you have to do today?`);
                            optional.push(`Any fun plans today?`);
                            optional.push(`What plans do you have today?`);
                            optional.push(`Any interesting plans today?`);
                            optional.push(`Did you get breakfast with your friend this morning?`);
                        }
                        optional.push(`How has work been?`);
                        optional.push(`How has work been going?`);
                        optional.push(`How has work been lately?`);
                        optional.push(`How is work going?`);
                        optional.push(`Anything interesting happening with work?`);
                        msg += ' ' + optional[Math.floor(rnd(m++) * optional.length)];
                    }
                    return msg;
                };

                this.getAudioClipQuestion = () => {
                    let m = 20759314;
                    const options = [
                        'Silly',
                        'Sweet',
                        'Salty',
                        'Spicy',
                        'Bitter',
                        'Oily',
                    ];
                    const reorderedOptions = [];
                    let msg = '';
                    let listOptions = '';
                    while (options.length > 0) {
                        const opt = options.splice(Math.floor(rnd(m++) * options.length), 1)[0];
                        reorderedOptions.push(opt);
                        if (options.length > 0) {
                            listOptions += opt.toLowerCase() + ', ';
                        }
                        else {
                            listOptions += `or ${opt.toLowerCase()}`;
                        }
                    }
                    const individualOptionQuestions = reorderedOptions.map(o => `${o}?`).join(' ');
                    const aOrAn = listOptions.indexOf('o') === 0 ? 'an' : 'a';

                    if (Math.floor(rnd(m++) * 10) % 3 === 0) {
                        const single = [
                            `For your audio clip this evening would you like something ${listOptions}?`,
                            `Would you like ${aOrAn} ${listOptions} audio clip this evening?`,
                            `Are you in the mood for something ${listOptions} this evening?`,
                        ];
                        msg = single[Math.floor(rnd(m++) * single.length)];
                    }
                    else {
                        //two sentence options
                        const opening = [
                            `What kind of clip are you in the mood for this evening babe?`,
                            `What kind of audio clip would you like?`,
                            `How will you take your evening audio clip tonight?`,
                            `What kind of audio clip are you in the mood for?`,
                            `What *flavor* of audio clip shall I serve for you tonight princess?`,
                            `What kind of audio clip would you like this evening babe?`,
                        ];
                        const ending = [
                            `${individualOptionQuestions}`,
                            `${capitalizeFirstLetter(listOptions)}?`,
                            `Something ${listOptions}?`,
                        ];

                        msg = `${opening[Math.floor(rnd(m++) * opening.length)]} ${ending[Math.floor(rnd(m++) * ending.length)]}`;
                    }

                    if (Math.floor(rnd(m++) * 10) % 3 > 0) {
                        if (Math.floor(rnd(m++) * 10) % 2 === 0) {
                            msg += ' 😘';
                        }
                        else {
                            msg += ' 🥰';
                        }
                    }

                    return msg;
                };

                this.getBedtimeTitles = () => {
                    let m = 14598314;
                    const firstWord = [
                        'Oh',
                        'My',
                        'Oh my',
                    ];
                    const descriptors = [
                        'Amazing',
                        'Awesome',
                        'Beautiful',
                        'Beloved',
                        'Brilliant',
                        'Charming',
                        'Dazzling',
                        'Dear',
                        'Delicate',
                        'Delightful',
                        'Divine',
                        'Enchanting',
                        'Exquisite',
                        'Fantastic',
                        'Fascinating',
                        'Gorgeous',
                        'Hot',
                        'Incredible',
                        'Lovely',
                        'Magnificent',
                        'Precious',
                        'Radiant',
                        'Ravishing',
                        'Sensational',
                        'Sexy',
                        'Spectacular',
                        'Stunning',
                        'Sweet',
                        'Wonderful',
                    ];
                    const mostUpgrade = {
                        'Amazing': 'Most amazing',
                        'Awesome': 'Most awesome',
                        'Beautiful': 'Most beautiful',
                        'Beloved': 'Most beloved',
                        'Brilliant': 'Most brilliant',
                        'Charming': 'Most charming',
                        'Dazzling': 'Most dazzling',
                        'Dear': 'Dearest',
                        'Delicate': 'Most delicate',
                        'Delightful': 'Most delightful',
                        'Divine': 'Most divine',
                        'Enchanting': 'Most enchanting',
                        'Exquisite': 'Most exquisite',
                        'Fantastic': 'Most fantastic',
                        'Fascinating': 'Most fascinating',
                        'Gorgeous': 'Most gorgeous',
                        'Hot': 'Hottest',
                        'Incredible': 'Most incredible',
                        'Lovely': 'Loveliest',
                        'Magnificent': 'Most magnificent',
                        'Precious': 'Most precious',
                        'Radiant': 'Most radiant',
                        'Ravishing': 'Most ravishing',
                        'Sensational': 'Most sensational',
                        'Sexy': 'Sexiest',
                        'Spectacular': 'Most spectacular',
                        'Stunning': 'Most stunning',
                        'Sweet': 'Sweetest',
                        'Wonderful': 'Most wonderful',
                    };
                    //Note: repeats are on purpose to make them slightly more common.
                    const endearment = [
                        'Tonia',
                        'princess',
                        'baby girl',
                        'best friend',
                        'favorite person',
                        'Tonia',
                        'princess',
                        'baby girl',
                        'favorite human being',
                        'queen of babes',
                        'goddess of beauty',
                        'mother of canines',
                        'Tonia',
                        'princess',
                        'baby girl',
                        'keeper of my heart',
                        'princess of my heart',
                    ];
                    //Remove used terms of endearment.
                    if (usedTerm1.length > 0 && endearment.indexOf(usedTerm1) > -1) {
                        endearment.splice(endearment.indexOf(usedTerm1), 1);
                    }
                    if (usedTerm2.length > 0 && endearment.indexOf(usedTerm2) > -1) {
                        endearment.splice(endearment.indexOf(usedTerm2), 1);
                    }

                    //get the descriptors
                    const desc = [];
                    let n = 0;
                    do {
                        let d = descriptors.splice(Math.floor(rnd(m++) * descriptors.length), 1)[0];
                        if (Math.floor(rnd(m++) * 67) > 50 && mostUpgrade.hasOwnProperty(d)) {
                            d = mostUpgrade[d];
                        }
                        if (n > 0) {
                            d = d.toLowerCase();
                        }
                        desc.push(d);
                    } while ((Math.floor(rnd(m++) * 4) > n++));

                    //if only two desc, joining with a , is optional
                    let descChain = '';
                    if (desc.length == 2 && Math.floor(rnd(m++) * 100) % 4 === 0) {
                        descChain = desc.join(' ');
                    }
                    else {
                        descChain = desc.join(', ');
                    }

                    usedTerm0 = endearment[Math.floor(rnd(m++) * endearment.length)];
                    const legalFirstWord = (usedTerm0.toLowerCase().indexOf('favorite') > -1 || usedTerm0.toLowerCase().indexOf('best') > -1)
                        ? firstWord.filter(x => x.toLowerCase().indexOf('my') > -1)
                        : (usedTerm0.toLowerCase().indexOf('my') > -1)
                            ? firstWord.filter(x => x.toLowerCase().indexOf('my') < 0)
                            : firstWord;

                    if (legalFirstWord.length !== firstWord.length || Math.floor(rnd(m++) * 100) % 7 > 0) {
                        //pick a first word
                        descChain = `${legalFirstWord[Math.floor(rnd(m++) * legalFirstWord.length)]} ${descChain.toLowerCase()}`;
                    }
                    return `${descChain} ${usedTerm0},`;
                };

                this.getGoldenShipOpening = () => {
                    let m = 23459236;
                    const endearment = [
                        'Princess',
                        'Baby girl',
                        'Babe',
                    ];
                    const endearmentTerm = endearment[Math.floor(rnd(m++) * endearment.length)];
                    const goldenStarTerms = [
                        'Your golden ship',
                        'Your magnificent golden ship',
                        'Your beautiful golden ship',
                        'Your spectacular golden ship',
                        'Your beautiful ship made of magical gold',
                    ];
                    const goldenTerm = goldenStarTerms[Math.floor(rnd(m++) * goldenStarTerms.length)];
                    const phrases = [
                        `${goldenTerm} awaits.`,
                        `${endearmentTerm}, the Golden Star is ready for boarding.`,
                        `${goldenTerm} is ready for you, ${endearmentTerm.toLowerCase()}.`,
                        `${goldenTerm} bobs quietly at the docks, waiting for its princess.`,
                        `${goldenTerm} is ready.`,
                        `The Golden Star is ready for boarding, ${endearmentTerm.toLowerCase()}.`,
                        `${endearmentTerm}, ${goldenTerm.toLowerCase()} is ready for boarding.`,
                        `${goldenTerm} is ready for adventure.`,
                        `The Golden Star is ready for boarding.`,
                        `${goldenTerm} awaits its princess.`,
                        `${goldenTerm} is ready for boarding.`,
                        `The Golden Star is ready for its princess to board.`,
                        `${goldenTerm} bobs quietly at the docks, waiting for you, ${endearmentTerm.toLowerCase()}.`,
                        `${goldenTerm} is ready to board.`,
                        `I have prepared ${goldenTerm.toLowerCase()} for you, ${endearmentTerm.toLowerCase()}.`,
                        `${goldenTerm} is ready for its princess.`,
                    ];
                    return phrases[Math.floor(rnd(m++) * phrases.length)];
                };

                this.getGoodnightOpening = () => {
                    let m = 314592907;
                    const endearment = [
                        'Tonia',
                        'princess',
                        'baby girl',
                        'babe',
                    ];
                    //Remove used term of endearment.
                    if (usedTerm0.length > 0 && endearment.indexOf(usedTerm0) > -1) {
                        endearment.splice(endearment.indexOf(usedTerm0), 1);
                    }

                    usedTerm1 = endearment.splice(Math.floor(rnd(m++) * endearment.length), 1)[0];
                    usedTerm2 = endearment.splice(Math.floor(rnd(m++) * endearment.length), 1)[0];
                    if (Math.floor(rnd(m++) * 10) % 2 === 0) {
                        return `Sweet dreams ${usedTerm1}. Goodnight ${usedTerm2}.`;
                    }
                    return `Goodnight ${usedTerm1}. Sweet dreams ${usedTerm2}.`;
                };
            }

            function Builder(state) {
                const r = new BadRando(state);
                const installmentsToolContainerId = 'installmentsToolContainer';
                const numInstallmentsSelectorId = 'numInstallmentsSelector';
                const maxInstallments = state.getMaxInstallments();

                this.buildMorningMessage = () => {
                    let message = state.getMorningMessage();
                    if (message === null) {
                        message = `${r.getGoodMorning()} 😍 ${r.getILoveYou()} 🥰\n\n[my dreams and how I'm feeling]\n\n${r.getQuestions()} 😘`;
                    }
                    const textArea = createElement('textarea', {'style': 'width: 512px; height: 128px; margin:16px auto;'}, message);
                    textArea.addEventListener('keyup', () => state.saveState());
                    state.connectTextArea(state.stateManagerNames.morning, textArea);
                    return makeDetail(`Good Morning Message`, textArea, r.isMorning);
                };

                this.buildAudioClipMessage = () => {
                    let message = state.getAudioClipMessage();
                    if (message === null) {
                        message = r.getAudioClipQuestion();
                    }
                    const textArea = createElement('textarea', {'style': 'width: 512px; height: 64px; margin:16px auto;'}, message);
                    textArea.addEventListener('keyup', () => state.saveState());
                    state.connectTextArea(state.stateManagerNames.audioClip, textArea);
                    return makeDetail(`Audio Clip Message`, textArea, r.isAfternoon);
                };

                this.buildGoodnightMessage = () => {
                    let message = state.getGoodnightMessage();
                    if (message === null) {
                        message = `${r.getBedtimeTitles()} [mini love letter]\n\n${r.getGoldenShipOpening()} [golden ship notes]\n\n${r.getGoodnightOpening()} [goodnight sweetness] 😘`;
                    }
                    const textArea = createElement('textarea', {'style': 'width: 512px; height: 256px; margin:16px auto;'}, message);
                    textArea.addEventListener('keyup', () => state.saveState());
                    state.connectTextArea(state.stateManagerNames.goodnight, textArea);
                    return makeDetail(`Goodnight Message`, textArea, r.isEvening);
                };
                
                this.buildInstallmentsTool = () => {
                    let numInstallments = state.getNumInstallments();
                    if (numInstallments === null) {
                        numInstallments = 3;
                        state.setNumInstallments(numInstallments);
                    }
                    const tool = createElement('div', {'style': 'padding: 16px;', 'id': installmentsToolContainerId}, null);
                    tool.appendChild(createElement('label', {'for': numInstallmentsSelectorId}, `How many installments?`));
                    const numInstallmentsSelector = createElement('input', {'type': 'number', 'min': '1', 'max': maxInstallments, 'value': numInstallments, 'name': numInstallmentsSelectorId, 'id': numInstallmentsSelectorId});
                    numInstallmentsSelector.addEventListener('keyup', () => state.saveState());
                    numInstallmentsSelector.addEventListener('mouseup', () => state.saveState());
                    state.connectNumberSelector(state.stateManagerNames.numInstallments, numInstallmentsSelector, sanitizeNumInstallments);
                    tool.appendChild(numInstallmentsSelector);
                    const goButton = createElement('input', {'type': 'button', 'value': 'Begin!'});
                    goButton.addEventListener('click', populateInstallmentsTool, false);
                    tool.appendChild(goButton);
                    if (state.installmentsStarted()) {
                        addInstallmentsBoxes(tool);
                    }
                    return makeDetail(`Installments Helper`, tool, state.installmentsStarted());
                };

                const sanitizeNumInstallments = (num) => Math.max(1, Math.min(num, maxInstallments));

                const populateInstallmentsTool = () => {
                    const toolContainer = document.getElementById(installmentsToolContainerId);
                    return addInstallmentsBoxes(toolContainer);
                };

                const addInstallmentsBoxes = (toolContainer) => {
                    const num = state.getNumInstallments();
                    if (toolContainer && num && !isNaN(num) && num > 0) {
                        toolContainer.innerHTML = '';
                        for (let i = 0; i < num; i++) {
                            //TODO: add a checkbox for each one to indicate when an installment has been delivered.
                            //When checked, gray out the text box? Collapse it to make it smaller?
                            let text = state.getInstallmentMessage(i+1);
                            if (text === null) {
                                text = `${(i+1)}/${num}: `;
                            }
                            const textArea = createElement('textarea', {'style': 'width: 512px; height: 256px; margin:16px auto;'}, text);
                            textArea.addEventListener('keyup', () => state.saveState());
                            state.connectTextArea(state.stateManagerNames[`installment${(i+1)}`], textArea);
                            toolContainer.appendChild(textArea);
                        }
                    }
                };
            }

            //TODO: allow clearing a value and setting it to null to regenerate a value (use a button on each textArea).
            function StateManager() {
                const stateDateKey = 'MessageToolStateDate';
                const stateDataKey = 'MessageToolStateData';
                const currentDate = (new Date()).toDateString();
                const maxInstallments = 12;

                this.getMaxInstallments = () => maxInstallments;

                this.stateManagerNames = {
                    morning: 'morningMessage',
                    audioClip: 'audioClipMessage',
                    goodnight: 'goodnightMessage',
                    numInstallments: 'numInstallments',
                    installment1: 'installment1Message',
                    installment2: 'installment2Message',
                    installment3: 'installment3Message',
                    installment4: 'installment4Message',
                    installment5: 'installment5Message',
                    installment6: 'installment6Message',
                    installment7: 'installment7Message',
                    installment8: 'installment8Message',
                    installment9: 'installment9Message',
                    installment10: 'installment10Message',
                    installment11: 'installment11Message',
                    installment12: 'installment12Message',
                };
                let stateObj = {};

                for (let n in this.stateManagerNames) {
                    stateObj[this.stateManagerNames[n]] = null;
                }

                const stateManagers = {};

                this.connectTextArea = (key, textArea) => {
                    stateManagers[key] = new TextAreaStateManager(textArea);
                };

                this.connectNumberSelector = (key, numSelector, sanitizer) => {
                    stateManagers[key] = new NumberSelectorStateManager(numSelector, sanitizer);
                };

                const loadState = () => {
                    stateObj = JSON.parse(localStorage.getItem(stateDataKey));
                };

                this.saveState = () => {
                    for (let n in stateManagers) {
                        if (stateManagers.hasOwnProperty(n)) {
                            stateObj[n] = stateManagers[n].getValue();
                        }
                    }
                    localStorage.setItem(stateDataKey, JSON.stringify(stateObj));
                };

                this.getMorningMessage = () => stateObj[this.stateManagerNames.morning];
                this.getAudioClipMessage = () => stateObj[this.stateManagerNames.audioClip];
                this.getGoodnightMessage = () => stateObj[this.stateManagerNames.goodnight];

                this.getNumInstallments = () => stateObj[this.stateManagerNames.numInstallments];
                this.setNumInstallments = (num) => stateObj[this.stateManagerNames.numInstallments] = num;

                this.getInstallmentMessage = (num) => stateObj[this.stateManagerNames[`installment${num}`]];
                this.installmentsStarted = () => {
                    for (let i = 0; i < maxInstallments; i++) {
                        if (this.getInstallmentMessage(i+1) !== null) {
                            return true;
                        }
                    }
                    return false;
                };

                if (localStorage.getItem(stateDateKey) === currentDate) {
                    loadState();
                }
                else {
                    localStorage.setItem(stateDateKey, currentDate);
                    this.saveState();
                }
            }

            function TextAreaStateManager(ta) {
                const textArea = ta;
                this.getValue = () => textArea.value;
            }

            function NumberSelectorStateManager(ns, sani) {
                const numberSelector = ns;
                const sanitizer = sani;
                this.getValue = () => sanitizer(parseInt(numberSelector.value));
            }

            const state = new StateManager();
            const builder = new Builder(state);
            const container = createElement('div', {'style': 'width:600px;height:100%;margin:0px auto;display:flex;flex-wrap:wrap;flex-direction:column;'}, null);
            container.appendChild(createElement('h1', {}, `Messaging Tools`));
            container.appendChild(createElement('h2', {}, `For Use with My Princess`));
            container.appendChild(builder.buildMorningMessage());
            container.appendChild(builder.buildAudioClipMessage());
            container.appendChild(builder.buildGoodnightMessage());
            container.appendChild(builder.buildInstallmentsTool());
            container.appendChild(createElement('h2', {}, `For Use with Everyone Else`));
            container.appendChild(createElement('p', {}, `Coming soon...`));
            document.body.appendChild(container);
            state.saveState();
        </script>
    </body>
</html>